{"name":"VolDiff","tagline":"Malware Memory Footprint Analysis based on Volatility","body":"\r\nVolDiff: Malware Memory Footprint Analysis\r\n==========================================\r\n\r\nVolDiff is a bash script that runs [Volatility](https://github.com/volatilityfoundation/volatility) plugins against memory images captured before and after malware execution. It creates a report that highlights system changes based on memory (RAM) analysis.\r\n\r\nVolDiff can additionally be used on a single memory image to automate Volatility plugin execution, and hunt for malicious patterns.\r\n\r\nUse Directions\r\n----------------\r\n\r\n1. Capture a memory dump of a clean Windows system and save it as \"baseline.vmem\". This image will serve as a baseline for the analysis.\r\n\r\n2. Execute your malware sample on the same system, then take a second memory dump and save it as \"infected.vmem\".\r\n\r\n3. Run VolDiff:\r\n<pre>\r\n./VolDiff.sh path/to/baseline.vmem path/to/infected.vmem profile [options]\r\n</pre>\r\n\"profile\" should be \"Win7SP0x86\" or \"Win7SP1x64\" etc.\r\n\r\nVolDiff will save the output of a selection of Volatility plugins for both memory images (baseline and infected), then it will create a report to highlight notable changes (new processes, network connections, injected code, drivers etc).\r\n\r\nVolDiff can also be used to analyse a single memory image:\r\n<pre>\r\n./VolDiff.sh path/to/image.vmem profile [options] \r\n</pre>\r\n\r\nAutomated Malware Checks\r\n-------------------------\r\nThe recommended option to use with VolDiff is `--malware-checks` , which checks process parent/child relationships, unusual loaded DLLs, suspicious imports, malicious drivers and much more.\r\n\r\n<pre>\r\n./VolDiff.sh [path/to/baseline.vmem] path/to/infected.vmem profile --malware-checks\r\n</pre>\r\n\r\n`--malware-checks` was tested and tailored for Windows 7 memory images.\r\n\r\n\r\nSample Output\r\n---------------\r\n<pre>\r\nVolatility analysis report generated by VolDiff.\r\nDownload the latest VolDiff version from https://github.com/aim4r/VolDiff/.\r\n\r\nSuspicious new connections (netscan)\r\n=========================================================================\r\n\r\nProto    Local Address                  Foreign Address      State            Pid      Owner \r\nTCPv4    172.16.108.128:139             0.0.0.0:0            LISTENING        4        System \r\nTCPv4    172.16.108.128:49167           62.24.131.168:80     CLOSED           924      svchost.exe \r\nTCPv4    172.16.108.128:49164           65.55.50.157:443     CLOSED           924      svchost.exe \r\nTCPv4    172.16.108.128:49165           62.24.131.168:80     CLOSED           924      svchost.exe \r\nTCPv4    172.16.108.128:49168           87.236.215.151:80    CLOSED           2108     explorer.exe\r\n\r\nSuspicious new processes (psscan)\r\n=========================================================================\r\n\r\nOffset(P)          Name                PID   PPID PDB        Time created                    \r\n------------------ ---------------- ------ ------ ---------- ------------------------------ \r\n0x000000003fc7f030 kmaxqsj.exe        2300   4044 0x3ebed520 2015-05-02 19:33:07 UTC+0000  \r\n0x000000003fc8ed40 malwr.exe          2908   4020 0x3ebed540 2015-05-02 19:32:45 UTC+0000  \r\n\r\nPotential process injection (malfind)\r\n=========================================================================\r\n\r\nProcess: kmaxqsj.exe Pid: 2300 Address: 0x400000\r\nVad Tag: VadS Protection: PAGE_EXECUTE_READWRITE\r\nFlags: CommitCharge: 165, MemCommit: 1, PrivateMemory: 1, Protection: 6\r\n\r\n0x00400000  4d 5a 90 00 03 00 00 00 04 00 00 00 ff ff 00 00   MZ..............\r\n0x00400010  b8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00   ........@.......\r\n0x00400020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\r\n0x00400030  00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00   ................\r\n\r\n0x400000 4d               DEC EBP\r\n0x400001 5a               POP EDX\r\n0x400002 90               NOP\r\n0x400003 0003             ADD [EBX], AL\r\n0x400005 0000             ADD [EAX], AL\r\n0x400007 000400           ADD [EAX+EAX], AL\r\n0x40000a 0000             ADD [EAX], AL\r\n0x40000c ff               DB 0xff\r\n\r\nSuspicious driver modules\r\n===========================================================================\r\n\r\nModule                               Driver\r\n------------------------------------ ------\r\nUNKNOWN                              \\Driver\\storage\r\nUNKNOWN                              \\Driver\\PGPsdkDriver\r\nUNKNOWN                              \\Driver\\cipher\r\nUNKNOWN                              \\Driver\\fileflt\r\nUNKNOWN                              \\Driver\\TdiFlt2\r\nUNKNOWN                              \\Driver\\TdiFlt\r\nUNKNOWN                              \\Driver\\stopsec\r\n\r\nSuspicious callbacks\r\n===========================================================================\r\n\r\nType                                 Callback   Module   \r\n------------------------------------ ---------- --------\r\nIoRegisterFsRegistrationChange       0x8549dd08 UNKNOWN  \r\nGenericKernelCallback                0x854a0c88 UNKNOWN  \r\nGenericKernelCallback                0x854964ec UNKNOWN \r\nGenericKernelCallback                0x854a0d88 UNKNOWN \r\nGenericKernelCallback                0x854961fa UNKNOWN \r\nIoRegisterShutdownNotification       0x854a28ca UNKNOWN \r\n\r\n</pre>\r\n\r\nInspiration\r\n------------\r\nThis work was initially inspired by Andrew Case ([@attrc](https://twitter.com/attrc)) talk on [analyzing the sophisticated Careto malware sample with memory forensics] (http://2014.video.sector.ca/video/110388398 \"analyzing the sophisticated Careto malware sample with memory forensics\"). Kudos to [@attrc](https://twitter.com/attrc) and all the Volatility development team for creating and maintaining the greatest memory forensic framework out there!\r\n\r\nLicence\r\n--------\r\nFree open source software. \r\n\r\nTested using Volatility 2.4 (vol.py) and Windows 7 memory images.\r\n\r\nFeedback and Bugs\r\n-------------------\r\nPlease submit feedback, report bugs, or send ideas that you want to see implemented to [@aim4r](https://twitter.com/aim4r), houcem.hachicha[@]gmail.com or [Github](https://github.com/aim4r/VolDiff/issues).\r\n","google":"UA-62554584-1","note":"Don't delete this file! It's used internally to help with page regeneration."}